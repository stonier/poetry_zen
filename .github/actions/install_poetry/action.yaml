# Inspired by https://github.com/snok/install-poetry
#
# There are easier mechanisms *if* your use case is simple,
#  - pipx for installation, but often fails on poetry
#      1.2.0, 1.2.1 failed but 1.2.0a2 ok
#  - setup-python handles dep caches, but only for single python / single project repos
#      https://github.com/actions/setup-python/releases/tag/v3.1.0
#
# This action:
#  - caches the installation
#  - installs poetry

name: "Install Poetry Action"
author: "Daniel Stonier <daniel.stonier@woven-planet.global>"
description: "Installs, configures and caches Poetry"
branding:
  icon: "package"
  color: "green"
inputs:
  version:
    description: "The Poetry version to install"
    required: true
    default: "latest"
  virtualenvs-create:
    description: "Whether Poetry should create a virtualenv or not"
    required: false
    default: "true"
  virtualenvs-in-project:
    description: "Whether Poetry should create virtualenvs in the project directory or not"
    required: false
    default: "false"
  virtualenvs-path:
    description: "The Poetry virtualenv path"
    required: false
    default: "{cache-dir}/virtualenvs"
  installer-parallel:
    description: "Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, but also slows down the installation"
    required: false
    default: "true"
  installation-arguments:
    description: "Arguments passed directly to the Poetry installation script. For example --force."
    required: false
  cache-version:
    description: "A suffix to attach to the end of the cache key (i.e. force a refresh)"
    required: false
    default: "0"
runs:
  using: "composite"
  steps:

    # TODO: minimise the sledge hammer on .local
    - name: Cache Poetry
      uses: actions/cache@v2
      with:
        path: ~/.local
        key: poetry-${{ inputs.version }}-${{ inputs.cache-version }}

    - name: Install and configure Poetry
      run: $GITHUB_ACTION_PATH/install_poetry.bash
      shell: bash
      env:
        VERSION:                ${{ inputs.version }}
        VIRTUALENVS_CREATE:     ${{ inputs.virtualenvs-create }}
        VIRTUALENVS_IN_PROJECT: ${{ inputs.virtualenvs-in-project }}
        VIRTUALENVS_PATH:       ${{ inputs.virtualenvs-path }}
        INSTALLER_PARALLEL:     ${{ inputs.installer-parallel }}
        INSTALLATION_ARGUMENTS: ${{ inputs.installation-arguments }}
